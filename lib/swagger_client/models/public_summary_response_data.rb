=begin
#CryptoWeather

#The CryptoWeather API allows for access to all of the cryptocurrency data and market forecast services provided. There are two primary categories of routes, `public` and `private`, where `public` routes are accessible to the general public and do not require API authentication, and `private` routes, which require API authentication.  ## General Overview  1. All API methods adhere to RESTful best practices as closely as possible. As such, all API calls will be made via the standard HTTP protocol using the GET/POST/PUT/DELETE request types.  2. Every request returns the status as a JSON response with the following:     - success, true if it was successful     - code, the http status code (also in the response header)         - 200 if response is successful         - 400 if bad request         - 401 if authorization JWT is wrong or limit exceeded         - 404 wrong route         - 500 for any internal errors     - status, the status of the request, default **success**     - errors, an array of any relevant error details  3. For any requests that are not successful an error message is specified and returned as an array for the **errors** key in the JSON response.  4. All authentication uses JSON Web Tokens (JWT), which is set as the **Authorization** entry in the header, see the following for more details.     - http://jwt.io     - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token  ## Code Example  The following is a code example in Python, which demonstrates using the [Python Requests library](https://requests.readthedocs.io/en/master/) for both the `public` and `private` API routes.  ``` import requests  HOST = \"https://api.cryptoweather.ai/v1\"  # Your API key (JWT) API_KEY = \"<YOUR API KEY>\"  # Example public request, no API key required. requests.get(\"{}/public/symbols\".format(HOST)).json()  # Get the current btc price using the public route requests.get(\"{}/public/price-current/{}\".format(HOST, \"btc\")).json()   # Example private request, API key required. Get the btc hourly forecasts headers = {\"Authorization\": \"Bearer {}\".format(API_KEY)} requests.get(\"{}/private/forecast/{}/{}\".format(HOST, \"btc\", \"1h\"),              headers=headers).json() ```

OpenAPI spec version: 

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14-SNAPSHOT

=end

require 'date'

module SwaggerClient
  class PublicSummaryResponseData
    attr_accessor :icon

    attr_accessor :name

    attr_accessor :symbol_name

    attr_accessor :slug

    attr_accessor :added

    attr_accessor :color

    attr_accessor :price_btc

    attr_accessor :price_usd

    attr_accessor :market_cap

    attr_accessor :volume_usd

    attr_accessor :change_pct

    attr_accessor :market_data_time

    attr_accessor :trend

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'icon' => :'icon',
        :'name' => :'name',
        :'symbol_name' => :'symbol_name',
        :'slug' => :'slug',
        :'added' => :'added',
        :'color' => :'color',
        :'price_btc' => :'price_btc',
        :'price_usd' => :'price_usd',
        :'market_cap' => :'market_cap',
        :'volume_usd' => :'volume_usd',
        :'change_pct' => :'change_pct',
        :'market_data_time' => :'market_data_time',
        :'trend' => :'trend'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'icon' => :'String',
        :'name' => :'String',
        :'symbol_name' => :'String',
        :'slug' => :'String',
        :'added' => :'Float',
        :'color' => :'PublicSummaryResponseColor',
        :'price_btc' => :'Float',
        :'price_usd' => :'Float',
        :'market_cap' => :'Float',
        :'volume_usd' => :'Float',
        :'change_pct' => :'Float',
        :'market_data_time' => :'Float',
        :'trend' => :'Array<PublicTrendResponseDataTrend>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'icon')
        self.icon = attributes[:'icon']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'symbol_name')
        self.symbol_name = attributes[:'symbol_name']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'added')
        self.added = attributes[:'added']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'price_btc')
        self.price_btc = attributes[:'price_btc']
      end

      if attributes.has_key?(:'price_usd')
        self.price_usd = attributes[:'price_usd']
      end

      if attributes.has_key?(:'market_cap')
        self.market_cap = attributes[:'market_cap']
      end

      if attributes.has_key?(:'volume_usd')
        self.volume_usd = attributes[:'volume_usd']
      end

      if attributes.has_key?(:'change_pct')
        self.change_pct = attributes[:'change_pct']
      end

      if attributes.has_key?(:'market_data_time')
        self.market_data_time = attributes[:'market_data_time']
      end

      if attributes.has_key?(:'trend')
        if (value = attributes[:'trend']).is_a?(Array)
          self.trend = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @icon.nil?
        invalid_properties.push('invalid value for "icon", icon cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @symbol_name.nil?
        invalid_properties.push('invalid value for "symbol_name", symbol_name cannot be nil.')
      end

      if @slug.nil?
        invalid_properties.push('invalid value for "slug", slug cannot be nil.')
      end

      if @added.nil?
        invalid_properties.push('invalid value for "added", added cannot be nil.')
      end

      if @color.nil?
        invalid_properties.push('invalid value for "color", color cannot be nil.')
      end

      if @price_btc.nil?
        invalid_properties.push('invalid value for "price_btc", price_btc cannot be nil.')
      end

      if @price_usd.nil?
        invalid_properties.push('invalid value for "price_usd", price_usd cannot be nil.')
      end

      if @market_cap.nil?
        invalid_properties.push('invalid value for "market_cap", market_cap cannot be nil.')
      end

      if @volume_usd.nil?
        invalid_properties.push('invalid value for "volume_usd", volume_usd cannot be nil.')
      end

      if @change_pct.nil?
        invalid_properties.push('invalid value for "change_pct", change_pct cannot be nil.')
      end

      if @market_data_time.nil?
        invalid_properties.push('invalid value for "market_data_time", market_data_time cannot be nil.')
      end

      if @trend.nil?
        invalid_properties.push('invalid value for "trend", trend cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @icon.nil?
      return false if @name.nil?
      return false if @symbol_name.nil?
      return false if @slug.nil?
      return false if @added.nil?
      return false if @color.nil?
      return false if @price_btc.nil?
      return false if @price_usd.nil?
      return false if @market_cap.nil?
      return false if @volume_usd.nil?
      return false if @change_pct.nil?
      return false if @market_data_time.nil?
      return false if @trend.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          icon == o.icon &&
          name == o.name &&
          symbol_name == o.symbol_name &&
          slug == o.slug &&
          added == o.added &&
          color == o.color &&
          price_btc == o.price_btc &&
          price_usd == o.price_usd &&
          market_cap == o.market_cap &&
          volume_usd == o.volume_usd &&
          change_pct == o.change_pct &&
          market_data_time == o.market_data_time &&
          trend == o.trend
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [icon, name, symbol_name, slug, added, color, price_btc, price_usd, market_cap, volume_usd, change_pct, market_data_time, trend].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
